// Jenkinsfile Scripted syntax using Jenkins global shared libraries
// This file uses a pre-defined build process where pre-build and post-build are executed in the background.
// Instructions:
//  * Rename to Jenkinsfile, case-sensitive filename
//  * Jenkinsfile template [instructions, see Step 5](https://github.com/bd-devops/template-build#template-instructions)

// Start of Jenkinsfile:
//===================================================================================================

// loads Devops build pipeline library
@Library('jenkins-common')
Devops = new io.bddevops.devops.Devops(this)

// set the target version
targetVersion = "1.0.0"

node('node-name') {

  // use Devops Pipeline wrapper
  Devops.pipeline(targetVersion) {
    stage('Build') {
      // EXAMPLE: dotnet build usage
      def slnFiles = ["path/to/solution/file1.sln,path/to/solution/file2.sln"]
      Devops.Dotnet.build(slnFiles)

      // EXAMPLE:  msbuild usage
      def slnFiles = ["path/to/solution/file1.sln,path/to/solution/file2.sln"]
      Devops.Msbuild.execute(slnFiles)
    }

    stage('Test') {
      // EXAMPLE: Execute unit tests with mstest.exe, 
      //   default parameter: '**/bin/Release/*.Test*.dll'
      Devops.Test.mstest()

      // EXAMPLE: Execute unit tests with nunit3-console.exe, 
      //   default parameter: '**/bin/Release/*.Test*.dll'
      Devops.Test.nunit()
      
      // EXAMPLE: Execute unit tests with vstest.exe, 
      //   default parameter: '**/bin/Release/*.Test*.dll'
      Devops.Test.vstest()
    }

    stage('Pack') {
      // EXAMPLE: create nupkgs using a nuspec-list.txt with dotnet and nuget, 
      //   default parameter: 'src/nuspec-list.txt'
      Devops.Pack.nuspecList()
          
      // EXAMPLE: create chocolately packages using devops commonpack process
      //   default parameter: "pack/**/*.json"
      Devops.Pack.choco()
    }
  }

}